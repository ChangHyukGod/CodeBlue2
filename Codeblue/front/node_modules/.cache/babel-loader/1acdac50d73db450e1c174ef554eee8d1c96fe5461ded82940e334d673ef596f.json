{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport axios from 'axios';\nexport default {\n  name: 'PostForm',\n  data() {\n    return {\n      post: {\n        title: '',\n        content: ''\n      },\n      selectedFile: null // 파일 저장을 위한 변수\n    };\n  },\n  computed: {\n    formTitle() {\n      return this.$route.params.id ? '게시물 수정' : '게시물 작성';\n    },\n    file() {\n      return this.$route.params.id ? '게시물 수정' : '첨부파일';\n    }\n  },\n  created() {\n    if (this.$route.params.id) {\n      const post = this.$store.state.posts.find(post => post.id === this.$route.params.id);\n      this.post = {\n        ...post\n      };\n    }\n  },\n  methods: {\n    // 파일 선택시 파일 처리\n    handleFileUpload(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    // 게시물 저장\n    async savePost() {\n      try {\n        const formData = new FormData();\n        formData.append('title', this.post.title);\n        formData.append('content', this.post.content);\n        if (this.selectedFile) {\n          formData.append('file', this.selectedFile);\n        }\n\n        // 게시물 작성 API 호출\n        if (this.$route.params.id) {\n          await axios.put(`/api/posts/${this.$route.params.id}`, formData); // 수정 요청\n        } else {\n          await axios.post('/api/posts', formData); // 새 게시물 추가 요청\n        }\n        this.$router.push('/admin');\n      } catch (error) {\n        console.error('게시물 저장 실패:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","post","title","content","selectedFile","computed","formTitle","$route","params","id","file","created","$store","state","posts","find","methods","handleFileUpload","event","target","files","savePost","formData","FormData","append","put","$router","push","error","console"],"sources":["C:\\Users\\KTE\\Documents\\GitHub\\LittleForest\\CodeBlue2\\Codeblue\\front\\src\\views\\admin\\AdminView.vue"],"sourcesContent":["<template>\r\n    <div class=\"post-form-container\">\r\n        <h2>{{ formTitle }}</h2>\r\n        <form @submit.prevent=\"savePost\" class=\"post-form\">\r\n            <div class=\"form-group\">\r\n                <label for=\"title\">제목</label>\r\n                <input v-model=\"post.title\" id=\"title\" required class=\"form-input\" />\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"content\">내용</label>\r\n                <textarea v-model=\"post.content\" id=\"content\" required class=\"form-textarea\"></textarea>\r\n            </div>\r\n            <div class=\"mb-3\">\r\n                <label for=\"formFile\" class=\"form-label\">{{ file }} </label>\r\n                <input class=\"form-control\" type=\"file\" id=\"formFile\" @change=\"handleFileUpload\">\r\n            </div>\r\n            <div class=\"form-actions\">\r\n                <button type=\"submit\" class=\"submit-button\">{{ formTitle }}</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    name: 'PostForm',\r\n    data() {\r\n        return {\r\n            post: {\r\n                title: '',\r\n                content: '',\r\n            },\r\n            selectedFile: null, // 파일 저장을 위한 변수\r\n        };\r\n    },\r\n    computed: {\r\n        formTitle() {\r\n            return this.$route.params.id ? '게시물 수정' : '게시물 작성';\r\n        },\r\n        file() {\r\n            return this.$route.params.id ? '게시물 수정' : '첨부파일';\r\n        }\r\n    },\r\n    created() {\r\n        if (this.$route.params.id) {\r\n            const post = this.$store.state.posts.find(\r\n                (post) => post.id === this.$route.params.id\r\n            );\r\n            this.post = { ...post };\r\n        }\r\n    },\r\n    methods: {\r\n        // 파일 선택시 파일 처리\r\n        handleFileUpload(event) {\r\n            this.selectedFile = event.target.files[0];\r\n        },\r\n\r\n        // 게시물 저장\r\n        async savePost() {\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append('title', this.post.title);\r\n                formData.append('content', this.post.content);\r\n                if (this.selectedFile) {\r\n                    formData.append('file', this.selectedFile);\r\n                }\r\n\r\n                // 게시물 작성 API 호출\r\n                if (this.$route.params.id) {\r\n                    await axios.put(`/api/posts/${this.$route.params.id}`, formData); // 수정 요청\r\n                } else {\r\n                    await axios.post('/api/posts', formData); // 새 게시물 추가 요청\r\n                }\r\n                this.$router.push('/admin');\r\n            } catch (error) {\r\n                console.error('게시물 저장 실패:', error);\r\n            }\r\n        },\r\n    },\r\n};\r\n</script>\r\n<style scoped>\r\n.post-form-container {\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    padding: 20px;\r\n    background-color: #f9f9f9;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n    font-size: 24px;\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n    color: #333;\r\n}\r\n\r\n.post-form {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.form-group {\r\n    margin-bottom: 15px;\r\n}\r\n\r\nlabel {\r\n    font-size: 16px;\r\n    margin-bottom: 5px;\r\n    color: #555;\r\n}\r\n\r\n.form-input,\r\n.form-textarea {\r\n    width: 100%;\r\n    padding: 10px;\r\n    font-size: 16px;\r\n    border: 1px solid #ddd;\r\n    border-radius: 4px;\r\n    margin-top: 5px;\r\n}\r\n\r\n.form-textarea {\r\n    resize: vertical;\r\n    height: 150px;\r\n}\r\n\r\n.submit-button {\r\n    padding: 10px 20px;\r\n    background-color: #ffeb33;\r\n    color: black;\r\n    font-size: 16px;\r\n    border: none;\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n    margin-top: 20px;\r\n}\r\n\r\n.submit-button:hover {\r\n    background-color: #ffeb33;\r\n}\r\n</style>"],"mappings":";;;AAwBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,IAAI,EAAE;QACFC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE;MACb,CAAC;MACDC,YAAY,EAAE,IAAI,CAAE;IACxB,CAAC;EACL,CAAC;EACDC,QAAQ,EAAE;IACNC,SAASA,CAAA,EAAG;MACR,OAAO,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAC,GAAI,QAAO,GAAI,QAAQ;IACtD,CAAC;IACDC,IAAIA,CAAA,EAAG;MACH,OAAO,IAAI,CAACH,MAAM,CAACC,MAAM,CAACC,EAAC,GAAI,QAAO,GAAI,MAAM;IACpD;EACJ,CAAC;EACDE,OAAOA,CAAA,EAAG;IACN,IAAI,IAAI,CAACJ,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE;MACvB,MAAMR,IAAG,GAAI,IAAI,CAACW,MAAM,CAACC,KAAK,CAACC,KAAK,CAACC,IAAI,CACpCd,IAAI,IAAKA,IAAI,CAACQ,EAAC,KAAM,IAAI,CAACF,MAAM,CAACC,MAAM,CAACC,EAC7C,CAAC;MACD,IAAI,CAACR,IAAG,GAAI;QAAE,GAAGA;MAAK,CAAC;IAC3B;EACJ,CAAC;EACDe,OAAO,EAAE;IACL;IACAC,gBAAgBA,CAACC,KAAK,EAAE;MACpB,IAAI,CAACd,YAAW,GAAIc,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED;IACA,MAAMC,QAAQA,CAAA,EAAG;MACb,IAAI;QACA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;QAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAE,IAAI,CAACvB,IAAI,CAACC,KAAK,CAAC;QACzCoB,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE,IAAI,CAACvB,IAAI,CAACE,OAAO,CAAC;QAC7C,IAAI,IAAI,CAACC,YAAY,EAAE;UACnBkB,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACpB,YAAY,CAAC;QAC9C;;QAEA;QACA,IAAI,IAAI,CAACG,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE;UACvB,MAAMX,KAAK,CAAC2B,GAAG,CAAC,cAAc,IAAI,CAAClB,MAAM,CAACC,MAAM,CAACC,EAAE,EAAE,EAAEa,QAAQ,CAAC,EAAE;QACtE,OAAO;UACH,MAAMxB,KAAK,CAACG,IAAI,CAAC,YAAY,EAAEqB,QAAQ,CAAC,EAAE;QAC9C;QACA,IAAI,CAACI,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC/B,EAAE,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MACtC;IACJ;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}